From: Xin Ouyang <Xin.Ouyang@windriver.com>
Date: Tue, 26 Jun 2012 13:48:44 +0800
Subject: [PATCH 1/2] findutils: support selinux

Upstream-Status: Backport

This is modified from a F13'sx SRPM patch.

================================================================================

    Author: James Youngman <jay@gnu.org>
    Date:   Sat Jul 11 19:55:27 2009 +0100

    Fix Savannah bug #27017: find -D opt / -fstype ext3 -print , -quit coredump.

    Fix Savannah bug #27017: find -D opt / -fstype ext3 -print , -quit
    coredumps.
    * find/tree.c (set_new_parent): Initialise struct
    predicate->arg_text to NULL (instead of leaving it uninitialised).
    (get_new_pred_noarg): Likewise.
    (get_new_pred): Initialise predicate->arg_text to
    "ThisShouldBeSetToSomethingElse" to make it easier to notice
    bugs.
    (get_new_pred_chk_op): Use get_new_pred_noarg.
    (print_predicate): Use an if statement instead of
    two ternary operators.
    * find/util.c (insert_primary_withpred): Accept new argument, arg,
    being the argument (if any) of this predicate.  Pass it to
    get_new_pred_chk_op.
    (insert_primary): Likewise (pass arg to insert_primary_withpred).
    (insert_primary_noarg): New function; calls insert_primary with
    arg=NULL.
    * find/parser.c (collect_arg_stat_info): Add an output parameter;
    the filename from which we collected the stat information.
    (parse_closeparen, parse_delete, parse_and, parse_or,
    parse_comma): Use get_new_pred_noarg.
    (parse_cnewer, parse_newer, parse_anewer): Use new
    collect_arg_stat_info and insert_primary interface.
    (parse_print, parse_prune, parse_nouser, parse_empty): Use
    insert_primary_noarg.
    (parse_accesscheck, parse_false): Use insert_primary_noarg.
    (parse_used, parse_iname, parse_fprint, insert_fprint,
    parse_fstype, parse_ilname): Use new collect_arg and
    insert_primary interfaces.
    (parse_ipath, parse_lname, do_parse_xmin, parse_name, parse_path,
    parse_perm, parse_size, parse_user, parse_time): Use new
    collect_arg and insert_primary_withpred interface.
    (parse_negate, parse_openparen): Use new get_new_pred_chk_op interface.
    (parse_newerXY, parse_nogroup): Use new insert_primary interface.
    (insert_regex, parse_samefile): Use new insert_primary_withpred
    interface.
    (insert_type, insert_fprintf, new_insert_exec_ok, insert_num): Use
    new insert_primary_withpred interface.
    * find/defs.h (struct predicate.arg_text): make const.
    Add declarations for new function get_new_pred_noarg and
    insert_primary_noarg.  Add 'arg' parameter to get_new_pred_chk_op
    and insert_primary_withpred.
---
 NEWS             |    6 +++
 doc/find.texi    |   18 +++++++-
 find/Makefile.am |    2 +-
 find/defs.h      |    6 +++
 find/find.1      |    4 ++
 find/parser.c    |  128 +++++++++++++++++++++++++++++++++++++++++++++++++++++-
 find/pred.c      |   47 ++++++++++++++++++++
 find/tree.c      |    2 +
 8 files changed, 209 insertions(+), 4 deletions(-)

diff --git a/NEWS b/NEWS
index 342a3d3..df0681c 100644
--- a/NEWS
+++ b/NEWS
@@ -1,5 +1,11 @@
 GNU findutils NEWS - User visible changes.	-*- outline -*- (allout)
 
+* Major changes in release 4.4.2, 2009-11-26
+
+** Functional Enhancements to find
+
+patch #4848: Patch - Support for SELinux
+
 * Major changes in release 4.4.2, 2009-05-16
 
 ** Bug Fixes
diff --git a/doc/find.texi b/doc/find.texi
index 391ffa0..f599bbc 100644
--- a/doc/find.texi
+++ b/doc/find.texi
@@ -7,7 +7,6 @@
 @c %**end of header
 
 @include version.texi
-@include ../locate/dblocation.texi
 
 @iftex
 @finalout
@@ -1242,6 +1241,14 @@ situation.
 
 @end deffn
 
+@deffn Test -context pattern
+True if file's SELinux context matches the pattern @var{pattern}.
+The pattern uses shell glob matching.
+
+This predicate is supported only on @code{find} versions compiled with
+SELinux support and only when SELinux is enabled.
+@end deffn
+
 @node Contents
 @section Contents
 
@@ -1733,6 +1740,7 @@ from the novel you are reading.
 * Size Directives::
 * Location Directives::
 * Time Directives::
+* Other Directives::
 * Formatting Flags::
 @end menu
 
@@ -1890,6 +1898,14 @@ File's last modification time in the format specified by @var{k}
 (@pxref{Time Formats}).
 @end table
 
+@node Other Directives
+@subsubsection Other Directives
+
+@table @code
+@item %Z
+File's SELinux context, or empty string if the file has no SELinux context.
+@end table
+
 @node Time Formats
 @subsection Time Formats
 
diff --git a/find/Makefile.am b/find/Makefile.am
index b001509..6fc7df3 100644
--- a/find/Makefile.am
+++ b/find/Makefile.am
@@ -26,7 +26,7 @@ endif
 
 EXTRA_DIST = defs.h $(man_MANS)
 INCLUDES = -I../gnulib/lib -I$(top_srcdir)/lib -I$(top_srcdir)/gnulib/lib -I../intl -DLOCALEDIR=\"$(localedir)\"
-LDADD = ./libfindtools.a ../lib/libfind.a ../gnulib/lib/libgnulib.a @INTLLIBS@ @LIB_CLOCK_GETTIME@ @FINDLIBS@
+LDADD = ./libfindtools.a ../lib/libfind.a ../gnulib/lib/libgnulib.a @INTLLIBS@ @LIB_CLOCK_GETTIME@ @FINDLIBS@ @LIB_SELINUX@
 man_MANS = find.1
 SUBDIRS = . testsuite
 
diff --git a/find/defs.h b/find/defs.h
index 4539fd9..e7e3a69 100644
--- a/find/defs.h
+++ b/find/defs.h
@@ -48,6 +48,7 @@ Please stop compiling the program now
 #include <stdbool.h>		/* for bool/boolean */
 #include <stdint.h>		/* for uintmax_t */
 #include <sys/stat.h> /* S_ISUID etc. */
+#include <selinux/selinux.h>
 
 
 
@@ -315,6 +316,7 @@ struct predicate
     struct samefile_file_id samefileid; /* samefile */
     mode_t type;		/* type */
     struct format_val printf_vec; /* printf fprintf fprint ls fls print0 fprint0 print */
+    security_context_t scontext; /* security context */
   } args;
 
   /* The next predicate in the user input sequence,
@@ -459,6 +461,7 @@ PREDICATEFUNCTION pred_used;
 PREDICATEFUNCTION pred_user;
 PREDICATEFUNCTION pred_writable;
 PREDICATEFUNCTION pred_xtype;
+PREDICATEFUNCTION pred_context;
 
 
 
@@ -604,6 +607,9 @@ struct options
    */
   int regex_options;
 
+  /* function used to get file context */
+  int (*x_getfilecon) (int, const char *, security_context_t *);
+
   /* Optimisation level.  One is the default. 
    */
   unsigned short optimisation_level;
diff --git a/find/find.1 b/find/find.1
index 8b67ae3..1d23b17 100644
--- a/find/find.1
+++ b/find/find.1
@@ -933,6 +933,8 @@ if \fIc\fR is `l'.  In other words, for symbolic links,
 checks the type of the file that 
 .B \-type
 does not check.
+.IP "\-context \fIpattern\fR"
+(SELinux only) Security context of the file matches glob \fIpattern\fR.
 
 .SS ACTIONS
 .IP "\-delete\fR"
@@ -1354,6 +1356,8 @@ File's type (like in
 U=unknown type (shouldn't happen)
 .IP %Y
 File's type (like %y), plus follow symlinks: L=loop, N=nonexistent
+.IP %Z
+(SELinux only) file's security context.
 .PP
 A `%' character followed by any other character is discarded, but the
 other character is printed (don't rely on this, as further format
diff --git a/find/parser.c b/find/parser.c
index 08758ee..d7fc9ce 100644
--- a/find/parser.c
+++ b/find/parser.c
@@ -53,6 +53,8 @@
 #include <unistd.h>
 #include <sys/stat.h>
 
+#include "selinux-at.h"
+
 #if ENABLE_NLS
 # include <libintl.h>
 # define _(Text) gettext (Text)
@@ -155,6 +157,7 @@ static boolean parse_noignore_race PARAMS((const struct parser_table*, char *arg
 static boolean parse_warn          PARAMS((const struct parser_table*, char *argv[], int *arg_ptr));
 static boolean parse_xtype         PARAMS((const struct parser_table*, char *argv[], int *arg_ptr));
 static boolean parse_quit          PARAMS((const struct parser_table*, char *argv[], int *arg_ptr));
+static boolean parse_context       PARAMS((const struct parser_table*, char *argv[], int *arg_ptr));
 
 boolean parse_print             PARAMS((const struct parser_table*, char *argv[], int *arg_ptr));
 
@@ -251,6 +254,7 @@ static struct parser_table const parse_table[] =
   PARSE_TEST       ("cmin",                  cmin),	     /* GNU */
   PARSE_TEST       ("cnewer",                cnewer),	     /* GNU */
   {ARG_TEST,       "ctime",                  parse_time, pred_ctime}, /* POSIX */
+  PARSE_TEST       ("context",               context),      /* GNU */
   PARSE_POSOPT     ("daystart",              daystart),	     /* GNU */
   PARSE_ACTION     ("delete",                delete), /* GNU, Mac OS, FreeBSD */
   PARSE_OPTION     ("d",                     d), /* Mac OS X, FreeBSD, NetBSD, OpenBSD, but deprecated  in favour of -depth */
@@ -347,6 +351,86 @@ static struct parser_table const parse_table[] =
 static const char *first_nonoption_arg = NULL;
 static const struct parser_table *noop = NULL;
 
+static int
+fallback_getfilecon (int fd, const char *name, security_context_t *p,
+		     int prev_rv)
+{
+  /* Our original getfilecon () call failed.  Perhaps we can't follow a
+   * symbolic link.  If that might be the problem, lgetfilecon () the link.
+   * Otherwise, admit defeat. */
+  switch (errno)
+    {
+      case ENOENT:
+      case ENOTDIR:
+#ifdef DEBUG_STAT
+	fprintf (stderr, "fallback_getfilecon(): getfilecon(%s) failed; falling "
+			"back on lgetfilecon()\n", name);
+#endif
+	return lgetfileconat (fd, name, p);
+
+      case EACCES:
+      case EIO:
+      case ELOOP:
+      case ENAMETOOLONG:
+#ifdef EOVERFLOW
+      case EOVERFLOW:        /* EOVERFLOW is not #defined on UNICOS. */
+#endif
+      default:
+	return prev_rv;
+    }
+}
+
+/* optionh_getfilecon () implements the getfilecon operation when the
+ * -H option is in effect.
+ *
+ * If the item to be examined is a command-line argument, we follow
+ * symbolic links.  If the getfilecon () call fails on the command-line
+ * item, we fall back on the properties of the symbolic link.
+ *
+ * If the item to be examined is not a command-line argument, we
+ * examine the link itself. */
+int
+optionh_getfilecon (int fd, const char *name, security_context_t *p)
+{
+  int rv;
+  if (0 == state.curdepth)
+    {
+      /* This file is from the command line; dereference the link (if it is
+	 a link). */
+      rv = getfileconat (fd, name, p);
+      if (0 == rv)
+	return 0;               /* success */
+      else
+	return fallback_getfilecon (fd, name, p, rv);
+    }
+  else
+    {
+      /* Not a file on the command line; do not dereference the link. */
+      return lgetfileconat (fd, name, p);
+    }
+}
+
+/* optionl_getfilecon () implements the getfilecon operation when the
+ * -L option is in effect.  That option makes us examine the thing the
+ * symbolic link points to, not the symbolic link itself. */
+int
+optionl_getfilecon (int fd, const char *name, security_context_t *p)
+{
+  int rv = getfileconat (fd, name, p);
+  if (0 == rv)
+    return 0;                  /* normal case. */
+  else
+    return fallback_getfilecon (fd, name, p, rv);
+}
+
+/* optionp_getfilecon () implements the stat operation when the -P
+ * option is in effect (this is also the default).  That option makes
+ * us examine the symbolic link itself, not the thing it points to. */
+int
+optionp_getfilecon (int fd, const char *name, security_context_t *p)
+{
+  return lgetfileconat (fd, name, p);
+}
 
 void
 check_option_combinations(const struct predicate *p)
@@ -450,11 +534,13 @@ set_follow_state(enum SymlinkOption opt)
 	{
 	case SYMLINK_ALWAYS_DEREF:  /* -L */
 	  options.xstat = optionl_stat;
+	  options.x_getfilecon = optionl_getfilecon;
 	  options.no_leaf_check = true;
 	  break;
 
 	case SYMLINK_NEVER_DEREF:	/* -P (default) */
 	  options.xstat = optionp_stat;
+	  options.x_getfilecon = optionp_getfilecon;
 	  /* Can't turn no_leaf_check off because the user might have specified
 	   * -noleaf anyway
 	   */
@@ -462,6 +548,7 @@ set_follow_state(enum SymlinkOption opt)
 
 	case SYMLINK_DEREF_ARGSONLY: /* -H */
 	  options.xstat = optionh_stat;
+	  options.x_getfilecon = optionh_getfilecon;
 	  options.no_leaf_check = true;
 	}
     }
@@ -1146,8 +1233,10 @@ tests (N can be +N or -N or N): -amin N -anewer FILE -atime N -cmin N\n\
       -nouser -nogroup -path PATTERN -perm [+-]MODE -regex PATTERN\n\
       -readable -writable -executable\n\
       -wholename PATTERN -size N[bcwkMG] -true -type [bcdpflsD] -uid N\n\
-      -used N -user NAME -xtype [bcdpfls]\n"));
+      -used N -user NAME -xtype [bcdpfls]"));
   puts (_("\
+      -context CONTEXT\n"));
+  puts (_("\n\
 actions: -delete -print0 -printf FORMAT -fprintf FILE FORMAT -print \n\
       -fprint0 FILE -fprint FILE -ls -fls FILE -prune -quit\n\
       -exec COMMAND ; -exec COMMAND {} + -ok COMMAND ;\n\
@@ -2574,6 +2663,11 @@ parse_version (const struct parser_table* entry, char **argv, int *arg_ptr)
   printf("LEAF_OPTIMISATION ");
   ++features;
 #endif
+  if (0 < is_selinux_enabled ())
+    {
+      printf ("SELINUX ");
+      ++features;
+    }
 
   flags = 0;
   if (is_fts_enabled(&flags))
@@ -2609,6 +2703,31 @@ parse_version (const struct parser_table* entry, char **argv, int *arg_ptr)
 }
 
 static boolean
+parse_context (const struct parser_table* entry, char **argv, int *arg_ptr)
+{
+  struct predicate *our_pred;
+
+  if ((argv == NULL) || (argv[*arg_ptr] == NULL))
+    return false;
+
+  if (is_selinux_enabled () <= 0)
+    {
+      error (1, 0, _("invalid predicate -context: SELinux is not enabled."));
+      return false;
+    }
+  our_pred = insert_primary (entry, NULL);
+  our_pred->est_success_rate = 0.01f;
+  our_pred->need_stat = false;
+#ifdef DEBUG
+  our_pred->p_name = find_pred_name (pred_context);
+#endif /*DEBUG*/
+  our_pred->args.scontext = argv[*arg_ptr];
+
+  (*arg_ptr)++;
+  return true;
+}
+
+static boolean
 parse_xdev (const struct parser_table* entry, char **argv, int *arg_ptr)
 {
   options.stay_on_filesystem = true;
@@ -2861,7 +2980,7 @@ insert_fprintf (struct format_val *vec,
 	  if (*scan2 == '.')
 	    for (scan2++; ISDIGIT (*scan2); scan2++)
 	      /* Do nothing. */ ;
-	  if (strchr ("abcdDfFgGhHiklmMnpPsStuUyY", *scan2))
+	  if (strchr ("abcdDfFgGhHiklmMnpPsStuUyYZ", *scan2))
 	    {
 	      segmentp = make_segment (segmentp, format, scan2 - format,
 				       KIND_FORMAT, *scan2, 0,
@@ -2991,6 +3110,11 @@ make_segment (struct segment **segment,
       *fmt++ = 's';
       break;
 
+    case 'Z':			/* SELinux security context */
+      mycost = NeedsAccessInfo;
+      *fmt++ = 's';
+      break;
+
     case 'H':			/* ARGV element file was found under */
       *fmt++ = 's';
       break;
diff --git a/find/pred.c b/find/pred.c
index b1f48a0..7c34119 100644
--- a/find/pred.c
+++ b/find/pred.c
@@ -48,6 +48,8 @@
 #include "error.h"
 #include "verify.h"
 
+#include <selinux/selinux.h>
+
 #if ENABLE_NLS
 # include <libintl.h>
 # define _(Text) gettext (Text)
@@ -230,6 +232,7 @@ struct pred_assoc pred_table[] =
   {pred_user, "user    "},
   {pred_writable, "writable "},
   {pred_xtype, "xtype   "},
+  {pred_context, "context"},
   {0, "none    "}
 };
 #endif
@@ -1054,6 +1057,30 @@ do_fprintf(struct format_val *dest,
 			     mode_to_filetype(stat_buf->st_mode & S_IFMT));
 	  }
 	  break;
+
+	case 'Z':               /* SELinux security context */
+	  {
+	    security_context_t scontext;
+	    int rv = (*options.x_getfilecon) (state.cwd_dir_fd, state.rel_pathname,
+					      &scontext);
+	    if (rv < 0)
+	      {
+		/* If getfilecon fails, there will in the general case
+		   still be some text to print.   We just make %Z expand
+		   to an empty string. */
+		checked_fprintf (dest, segment->text, "");
+
+		error (0, errno, "getfilecon: %s",
+		    safely_quote_err_filename (0, pathname));
+		state.exit_status = 1;
+	      }
+	    else
+	      {
+		checked_fprintf (dest, segment->text, scontext);
+		freecon (scontext);
+	      }
+	  }
+	  break;
 	}
       /* end of KIND_FORMAT case */
       break;
@@ -1844,6 +1871,26 @@ pred_xtype (const char *pathname, struct stat *stat_buf, struct predicate *pred_
    */
   return (pred_type (pathname, &sbuf, pred_ptr));
 }
+
+
+boolean
+pred_context (const char *pathname, struct stat *stat_buf,
+	      struct predicate *pred_ptr)
+{
+  security_context_t scontext;
+  int rv = (*options.x_getfilecon) (state.cwd_dir_fd, state.rel_pathname,
+				    &scontext);
+  if (rv < 0)
+    {
+      error (0, errno, "getfilecon: %s", safely_quote_err_filename (0, pathname));
+      return false;
+    }
+
+  rv = (fnmatch (pred_ptr->args.scontext, scontext, 0) == 0);
+  freecon (scontext);
+  return rv;
+}
+
 
 /*  1) fork to get a child; parent remembers the child pid
     2) child execs the command requested
diff --git a/find/tree.c b/find/tree.c
index 60a0601..63100fb 100644
--- a/find/tree.c
+++ b/find/tree.c
@@ -909,6 +909,7 @@ static struct pred_cost_lookup costlookup[] =
     { pred_cmin      ,  NeedsStatInfo,       },
     { pred_cnewer    ,  NeedsStatInfo,       },
     { pred_comma     ,  NeedsNothing,        },
+    { pred_context   ,  NeedsAccessInfo      },
     { pred_ctime     ,  NeedsStatInfo,       },
     { pred_delete    ,  NeedsSyncDiskHit     },
     { pred_empty     ,  NeedsStatInfo        },
@@ -1453,6 +1454,7 @@ get_new_pred (const struct parser_table *entry)
   last_pred->p_cost = NeedsUnknown;
   last_pred->arg_text = "ThisShouldBeSetToSomethingElse";
   last_pred->args.str = NULL;
+  last_pred->args.scontext = NULL;
   last_pred->pred_next = NULL;
   last_pred->pred_left = NULL;
   last_pred->pred_right = NULL;
-- 
1.7.5.4

